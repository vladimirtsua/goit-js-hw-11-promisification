{"version":3,"sources":["webpack:///./index.js","webpack:///./js/task3.js","webpack:///./js/task2.js","webpack:///./js/task1.js"],"names":["makeTransaction","transaction","delay","min","max","Math","floor","random","Promise","resolve","reject","canProcess","setTimeout","id","time","logSuccess","console","log","logError","warn","amount","then","catch","users","name","active","toggleUserState","allUsers","userName","map","user","logger","updatedUsers","table","ms"],"mappings":"2FAAA,sC,mBCAA,MAIQA,EAAkBC,IACtB,MAAMC,GALyBC,EAKS,IALJC,EAKS,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IADtB,IAACA,EAAKC,EAMpC,OAAO,IAAII,QAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAaN,KAAKE,SAAW,GACnCK,WAAW,KACLD,GACFF,EAAQ,CACNI,GAAIZ,EAAYY,GAChBC,KAAMZ,IAGVQ,EAAOT,EAAYY,KAClBX,MAIDa,EAAa,EAAEF,KAAIC,WACvBE,QAAQC,IAAK,eAAcJ,kBAAmBC,QAG1CI,EAAWL,IACfG,QAAQG,KAAM,gCAA+BN,+BAG/Cb,EAAgB,CAAEa,GAAI,GAAIO,OAAQ,MAAOC,KAAKN,GAAYO,MAAMJ,GAEhElB,EAAgB,CAAEa,GAAI,GAAIO,OAAQ,MAAOC,KAAKN,GAAYO,MAAMJ,GAEhElB,EAAgB,CAAEa,GAAI,GAAIO,OAAQ,KAAMC,KAAKN,GAAYO,MAAMJ,GAE/DlB,EAAgB,CAAEa,GAAI,GAAIO,OAAQ,MAAOC,KAAKN,GAAYO,MAAMJ,I,qBClClE,MAAMK,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAInBC,EAAkB,CAACC,EAAUC,IAC1B,IAAIpB,QAAQC,IAIjBA,EAHoBkB,EAASE,IAAIC,GAC/BA,EAAKN,OAASI,EAAW,IAAKE,EAAML,QAASK,EAAKL,QAAWK,MAM7DC,EAASC,GAAgBhB,QAAQiB,MAAMD,GAE7CN,EAAgBH,EAAO,SAASF,KAAKU,GACrCL,EAAgBH,EAAO,OAAOF,KAAKU,I,mBCpBrC,MAAM7B,EAAQgC,GACM,IAAI1B,QAAQC,IACzBG,WAAW,IAAMmB,EAAOG,GAAK,OAK9BH,EAASjB,GAAQE,QAAQC,IAAK,kBAAiBH,OAGrDZ,EAAM,KAAMmB,KAAKU,GACjB7B,EAAM,KAAMmB,KAAKU,GACjB7B,EAAM,MAAMmB,KAAKU,K","file":"main.7e293bf0547dde696095.js","sourcesContent":["import './js/task1'\nimport './js/task2'\nimport './js/task3'","const randomIntegerFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n  \n  const makeTransaction = transaction => {\n    const delay = randomIntegerFromInterval(200, 500);\n    return new Promise((resolve, reject) => {\n      const canProcess = Math.random() > 0.3;\n      setTimeout(() => {\n        if (canProcess) {\n          resolve({\n            id: transaction.id,\n            time: delay,\n          });\n        }\n        reject(transaction.id);\n      }, delay);\n    });\n  };\n  \n  const logSuccess = ({id, time}) => {\n    console.log(`Transaction ${id} processed in ${time}ms`);\n  };\n  \n  const logError = id => {\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\n  };\n  \n  makeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n  \n  makeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n  \n  makeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n  \n  makeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);","const users = [\n    { name: 'Mango', active: true },\n    { name: 'Poly', active: false },\n    { name: 'Ajax', active: true },\n    { name: 'Lux', active: false },\n  ];\n  \n  \n  const toggleUserState = (allUsers, userName) => {\n    return new Promise(resolve => {\n      const updateUsers = allUsers.map(user =>\n        user.name === userName ? { ...user, active: !user.active } : user,\n      );\n      resolve(updateUsers);\n    });\n  };\n  \n  const logger = updatedUsers => console.table(updatedUsers);\n  \n  toggleUserState(users, 'Mango').then(logger);\n  toggleUserState(users, 'Lux').then(logger);","const delay = ms => {\n    const promise = new Promise(resolve => {\n       setTimeout(() => logger(ms), 2000)\n    })\n    return promise\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n"],"sourceRoot":""}